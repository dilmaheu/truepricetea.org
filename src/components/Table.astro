---
export interface Props {
  tableContent: item[];
  extraClass?: string;
}

type item = {
  externality: string;
  cost: number;
  unit: string;
  percentage: number;
};

const { tableContent, extraClass } = Astro.props as Props;
---

<table class={extraClass}>
  <tr>
    <th>Externality</th>
    <th>True cost</th>
    <th>Unit</th>
    <th>True cost (%)</th>
  </tr>
  {tableContent.map((item, i) => (
    <tr class={`row-${i.toString()}`}>
      <td class="externality">{item.externality}</td>
      <td class="cost number">{item.cost}</td>
      <td class="unit">{item.unit}</td>
      <td class="percentage number">{item.percentage}%</td>
    </tr>
  ))}
</table>

<style>
  .container {
    display: flex;
    justify-content: space-between;
  }

  table {
    border: 2px solid;
    border-collapse: collapse;
    width: auto;
  }

  th,
  td {
    padding: 2px 8px;
    text-align: left;
    border-bottom: 2px solid;
    border-right: 2px solid;
  }

  .number {
    text-align: right;
  }

  .row-0 {
    background-color: rgb(144, 174, 124);
  }

  .row-1 {
    background-color: rgb(144, 174, 124, 0.65);
  }

  .row-2 {
    background-color: rgb(144, 174, 124, 0.45);
  }

  .row-3 {
    background-color: rgb(244, 176, 132);
  }

  .row-4 {
    background-color: rgb(244, 176, 132, 0.65);
  }

  .row-5 {
    background-color: rgb(244, 176, 132, 0.45);
  }

  .row-6 {
    background-color: rgb(217, 225, 242);
  }

  @media only screen and (max-width: 1160px) {
    .container {
      flex-direction: column;
    }

    .table-1 {
      margin-bottom: 40px;
    }
  }

  @media only screen and (max-width: 480px) {
    /* .container {
      overflow-x: scroll;
    }

    table {
      width: 500px;
    } */

    th,
    td {
      padding: 0px 3px;
    }
  }
</style>
