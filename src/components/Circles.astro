---
import Circle from "./Circle.astro";
import { Content } from "../utils/api";

export interface Props {
  content: Content;
}

const { content } = Astro.props as Props;
const circlesGraphs = content.data.attributes.circle_graphs;
---

<div class="container">
  {circlesGraphs.map((circles) => (
    <div class="circle-container flex-wrapper container padding-48 w-full">
      {circles.circle_graph_group.map((circle) => (
        <Circle
          color={circle.color}
          percentage={circle.percentage}
          desc={{ title: circle.title, text: circle.description }}
        />
      ))}
    </div>
  ))}
</div>

<style>
  .flex-wrapper {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
  }

  .circle-container {
    border: 0.1px solid #c4c4c4;
    margin: 20px auto;
  }

  @media only screen and (max-width: 1120px) {
  }
</style>

<script is:inline>
  const targets = document.querySelectorAll(".single-chart");

  targets.forEach((target) => {
    function handleIntersection(entries) {
      entries.map((entry) => {
        if (entry.isIntersecting) {
          const circle = entry.target.getElementsByClassName("circle")[0];
          circle.classList.add("animate");
        }
      });
    }

    const observer = new IntersectionObserver(handleIntersection);

    observer.observe(target);
  });
</script>
